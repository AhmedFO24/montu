option explicit
' Mecanum drive demonstrator
' Script is written for use in SDC2130 but will work on any other model by changing where commented.
' Script must be loaded and executed in controller that will serve as Master on a RoboCAN network.
' Second dual channel controller will act a Slave. Master node id=1, Slave node id=2
' Script is provided for demonstration purposes, as-is without warranty.
' Previous values for change detection

dim speed_right as integer	' right motor
dim speed_left as integer	' left motor

dim Power1 as integer	' Right Power
dim Power2 as integer	' Left Power

dim rpm_1 as integer	' Right RPM
dim rpm_2 as integer	' Left RPM

dim current_1 as integer   ' Right Current
dim current_2 as integer   ' Left Current

speed_right=0
speed_left=0

setconfig(_BRUN, 1)	' Configures the controller to automatically run channel 1
'setconfig(_BLFB, 1, 1)	' First 1 for ch1 and second 1 for ON and this command used to enable the feedback
SetCommand(_G, 1, 0)	' Set the speed of channels 1 to Zero
SetCommand(_G, 2, 0)	' Set the speed of channels 2 to Zero

' Top is used to create a loop
Top:
' Use code below to accept commands via RS232 or USB
' Send commands with !VAR nn value
' VAR 1 contains right speed, +/-1000 range
' VAR 3 contains left speed, +/-1000 range

speed_right = getvalue(_VAR, 1)	' Retrieves the value of _VAR 1 for speed Right (These commands read external inputs (such as from a joystick))
speed_left = getvalue(_VAR, 3)	' Retrieves the value of _VAR 3 for speed Left (These commands read external inputs (such as from a joystick))

'print("Speed=",Speed,"\n")

SetCommand(_G, 1, speed_right)	' Sends the speed values to the Right (channel 1)
SetCommand(_G, 2, speed_left)		' Sends the speed values to the Left (channel 2)


'BatteryVolts = getvalue(_VOLTS, 1)
' Compute power from each channel by multiplying the retrieve battery amps by the battery voltage
' Since Amps and Volts are measured x10 each (ie, 245 = 24.5), the result must be divided by 10
' For best precision do all the multiplications first. Because the math is done with integers only
' (i.e. no decimals), getvalue(_BATAMPS, 1) /100 * BatteryVolts would not give an accurate result 
' even though the formula is mathematically equivalent.

' getvalue(_VOLTS, 1): Refers to the voltage measured on the first sensor (main battery input).
' getvalue(_VOLTS, 2): Refers to the voltage measured on a second input (which can sometimes be for a different voltage input or power source).
' the voltage retrieved from sensor 2 is applicable to both motor 1 and motor 2.

Power1 = (getvalue(_MOTAMPS, 1) * getvalue(_VOLTS, 2)*getvalue(_MOTPWR, 1)) / 100000
Power2 = (getvalue(_MOTAMPS, 2) * getvalue(_VOLTS, 2)*getvalue(_MOTPWR, 2)) / 100000

' retrieves the current RPM of motor from the Brushless Sensor (_BS).
rpm_1 = getvalue(_BS, 1)
rpm_2 = getvalue(_BS, 2)


current_1 = getvalue(_MOTAMPS, 1)/10
current_2 = getvalue(_MOTAMPS, 2)/10

' Output the two power values. E.g. W=55:66. Terminate with "\r" for cariage return
' print ("!",Power1,":",Power2,"^","\n")


print (rpm_1,",",rpm_2,",",current_1,",",current_2,",",Power1,",",Power2,"\n")


wait(10) ' Repeat loop every 10ms / 100Hz
goto top





